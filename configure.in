# **************************************************************************
# SoGtk/configure.in
# $Id$

AC_INIT(src/Inventor/Gtk/SoGtk.cpp)
AC_CONFIG_AUX_DIR(cfg)

# If the Microsoft Visual C++ cl.exe compiler is available, set us up for
# compiling with it and to generate an MSWindows .dll file.

BUILD_WITH_MSVC=false
SIM_AC_SETUP_MSVC_IFELSE([
  BUILD_WITH_MSVC=true
], [
  case $host in
  *-cygwin)
    AC_MSG_ERROR([You need Microsoft Visual C++ to build on Cygwin])
    ;;
  esac
])

AM_CONDITIONAL([BUILD_WITH_MSVC], [$BUILD_WITH_MSVC])

# **************************************************************************
# Make sure the given source repository is in sync with the master source
# repository.

SIM_AC_CVS_CHANGES([
  # the moving of "conf-macros" to "cfg/m4"
  SIM_AC_CVS_CHANGE([
    rm -rf conf-macros
    cvs co SoGtkMacros
  ], [test -d cfg/m4/CVS], [test ! -d conf-macros])

  # the addition of the "data" module
  SIM_AC_CVS_CHANGE([
    cvs co SoGtkData
  ], [test -d data/CVS])
])

# **************************************************************************
# Library versioning

SOGTK_MAJOR_VERSION=0
SOGTK_MINOR_VERSION=9
SOGTK_MICRO_VERSION=99
SOGTK_VERSION=$SOGTK_MAJOR_VERSION.$SOGTK_MINOR_VERSION.$SOGTK_MICRO_VERSION
VERSION=$SOGTK_VERSION

AC_SUBST(SOGTK_MAJOR_VERSION)
AC_SUBST(SOGTK_MINOR_VERSION)
AC_SUBST(SOGTK_MICRO_VERSION)
AC_SUBST(SOGTK_VERSION)

# libtool versioning
LT_CURRENT=$SOGTK_MAJOR_VERSION
LT_AGE=0
LT_REVISION=`expr $SOGTK_MINOR_VERSION \* 100 + $SOGTK_MICRO_VERSION`

AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

# The following are set up in Inventor/Gtk/SoGtkBasic.h
AC_DEFINE_UNQUOTED([SOGTK_MAJOR_VERSION], [$SOGTK_MAJOR_VERSION],
  [The major version number for SoGtk])
AC_DEFINE_UNQUOTED([SOGTK_MINOR_VERSION], [$SOGTK_MINOR_VERSION],
  [The minor version number for SoGtk])
AC_DEFINE_UNQUOTED([SOGTK_MICRO_VERSION], [$SOGTK_MICRO_VERSION],
  [The micro version number for SoGtk])
AC_DEFINE_UNQUOTED([SOGTK_VERSION], ["$SOGTK_VERSION"],
  [The version string for SoGtk])

# **************************************************************************

AC_CANONICAL_SYSTEM

# **************************************************************************
# Locate compilers and set C++ as the default compiler to run in tests.

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_LANG_CPLUSPLUS

# **************************************************************************
# Miscellaneous options and initializations.

AM_INIT_AUTOMAKE(SoGtk, $VERSION)

#  File to cram results from the configure tests into.
AM_CONFIG_HEADER(src/config.h)

#  Default to not building a static library.
#  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

#  Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

# ranlib is a cygwin gcc tool, and we don't support cygwin gcc
if $BUILD_WITH_MSVC; then
  RANLIB=true
  export RANLIB
fi

# IRIX has 'ar' problems with libtool 1.3.5
case "$host_os" in
  irix*)
    if test x"${AR+set}" != x"set"; then
      AR="CC -ar"
      AR_FLAGS=
      export AR AR_FLAGS
      echo "overriding the libtool '\$AR' setting with 'CC -ar'"
    fi
    ;;
  *) ;;
esac

#  Initialize libtool
AC_PROG_LIBTOOL
AC_LANG(C)
AC_LANG(C++)

#  These are used for constructing the sogtk-config file.
AC_SUBST([SOGUI_EXTRA_CPPFLAGS], [])
AC_SUBST([SOGUI_EXTRA_CFLAGS], [])
AC_SUBST([SOGUI_EXTRA_CXXFLAGS], [])
AC_SUBST([SOGUI_EXTRA_LDFLAGS], [])
AC_SUBST([SOGUI_EXTRA_LIBS], [])

SIM_EXPAND_DIR_VARS

AC_CHECK_HEADERS([windows.h dirent.h unistd.h])

# *******************************************************************
# Instead of getenv() on most Win32 platforms (not Windows CE).

AC_MSG_CHECKING([for GetEnvironmentVariable() function])
AC_TRY_LINK([#include <windows.h>],
            [(void)GetEnvironmentVariable("FOOBAR", NULL, 0);],
  [AC_MSG_RESULT([yes])
  AC_DEFINE([HAVE_GETENVIRONMENTVARIABLE],1, [Define to use GetEnvironmentVariable() instead of getenv()])],
  [AC_MSG_RESULT([no])])

# **************************************************************************
# If you just want to generate docs, ignore all the build-related tests

sim_ac_build_library=true
AC_ARG_ENABLE(
  [build],
  AC_HELP_STRING([--disable-build], [disable configuring for library build]), [
  case $enableval in
    no) sim_ac_build_library=false ;;
    *)  ;;
  esac])
AM_CONDITIONAL([BUILD_LIBRARY], [$sim_ac_build_library])

AC_ARG_WITH(
  [alternate],
  [AC_HELP_STRING([--with-alternate=string],
                  [specify name of alternate configuration])],
  [CONFIG=$withval],
  [CONFIG=default])

AC_SUBST(CONFIG)

AC_ARG_WITH(
  [suffix],
  [AC_HELP_STRING([--with-suffix=string],
                  [specify library name suffix (e.g. "_g")])],
  [SUFFIX=$withval],
  [SUFFIX=])

AC_SUBST(SUFFIX)

# **************************************************************************
# Section for Doxygen

AC_ARG_VAR([htmldir],
           [destination for HTML docs (default ${datadir}/SoGtk/html)])

AC_ARG_ENABLE(html,
  AC_HELP_STRING([--enable-html], [build and install SoGtk HTML documentation]),
  [case $enableval in
    yes | true) want_html=yes ;;
    *)          want_html=no ;;
  esac],
  [want_html=no])

case $htmldir in
"")
  htmldir="$datadir/SoGtk/html"
  ;;
/*)
  # do nothing - absolute path
  ;;
*)
  htmldir="\${prefix}/$htmldir"
  ;;
esac

AC_SUBST(htmldir)

AC_ARG_ENABLE(man,
  AC_HELP_STRING([--enable-man], [build and install SoGtk man pages]),
  [case $enableval in
    yes | true) want_man=yes ;;
    *)          want_man=no ;;
  esac],
  [want_man=no])

# Used in the Doxygen parameter file.
AC_SUBST([SOGTK_DOC_HTML], [`echo $want_html | tr '[a-z]' '[A-Z]'`])
AC_SUBST([SOGTK_DOC_MAN], [`echo $want_man | tr '[a-z]' '[A-Z]'`])

AC_SUBST([sogtk_build_dir], [`pwd`])
AC_SUBST([sogtk_src_dir], [`cd $srcdir; pwd`])
AC_SUBST([sogtk_html_dir], [$sogtk_build_dir/html])
AC_SUBST([sogtk_man_dir], [$sogtk_build_dir/man])

AM_CONDITIONAL(BUILD_MANPAGES, test x"$want_man" = x"yes")
AM_CONDITIONAL(BUILD_HTMLPAGES, test x"$want_html" = x"yes")

if test x"$want_man" = x"yes"; then
  SIM_AC_CONFIGURATION_SETTING([manpage installation], [$mandir])
fi

if test x"$want_html" = x"yes"; then
  SIM_AC_CONFIGURATION_SETTING([HTML installation], [$htmldir])
fi

if test x"$want_html" != xno -o x"$want_man" != xno; then
  SIM_AC_DOXYGEN_TOOL([], [SIM_AC_ERROR([no-doxygen])])
  # too much overhead in maintaining this stupid thing...
  # sim_ac_doxygen_our_version=1.2.1
  # if test x"$sim_ac_doxygen_avail" != x"$sim_ac_doxygen_our_version"; then
  #   AC_MSG_WARN(You are not using Doxygen version $sim_ac_doxygen_our_version)
  # fi

  AC_PATH_PROG(sim_ac_perl_exe, perl, false, $PATH)
  if test x"$sim_ac_perl_exe" = xfalse; then
    AC_MSG_WARN(Could not find the Perl executable)
  fi
fi

# path_tag is used to identify paths in docs/coin.doxygen that needs to be
# transformed using cygpath under cygwin.

case $host in
*-cygwin) path_tag="<PATH>" ;;
*)        path_tag= ;;
esac

AC_SUBST(path_tag)

AM_CONDITIONAL([BUILD_METAFILES], [false])
AC_SUBST([meta_prefix], [bogus])

# **************************************************************************

if $sim_ac_build_library; then

# **************************************************************************

if test -n "$with_inventor" -a x"$with_inventor" != x"no"; then
  SIM_AC_CHECK_DL([
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_dl_libs $SOGUI_EXTRA_LIBS"
  ])

  SIM_AC_CHECK_X11([
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_x11_libs $SOGUI_EXTRA_LIBS"

    SIM_AC_CHECK_X11SHMEM([
      SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_x11shmem_cppflags"
      SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_x11shmem_ldflags"
      SOGUI_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOGUI_EXTRA_LIBS"
    ], [
      AC_MSG_WARN([couldn't use X11 shared memory extension - may cause problems with OpenGL linking later])
    ])
  ], [
    AC_MSG_WARN([couldn't use X11 library - may cause problems with OpenGL linking later])
  ])

  SIM_AC_CHECK_OPENGL([
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_gl_libs $SOGUI_EXTRA_LIBS"
    CPPFLAGS="$CPPFLAGS $sim_ac_gl_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_gl_ldflags"
    LIBS="$sim_ac_gl_libs $LIBS"
  ], [AC_MSG_ERROR([need OpenGL-compatible development system installation])])

  SIM_AC_CHECK_GLU([
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_glu_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_glu_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_glu_libs $SOGUI_EXTRA_LIBS"
  ], [
    AC_MSG_ERROR([need OpenGL utility library])
  ])

  SIM_AC_HAVE_INVENTOR_IFELSE([
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_inventor_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_inventor_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_inventor_libs $SOGUI_EXTRA_LIBS"
    CPPFLAGS="$CPPFLAGS $sim_ac_inventor_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_inventor_ldflags"
    LIBS="$sim_ac_inventor_libs $LIBS"
  ], [
    AC_MSG_ERROR([couldn't compile and link against Open Inventor])
  ])
  SIM_AC_CONFIGURATION_SETTING([Open Inventor brand], [SGI/TGS Inventor])
else
  SIM_AC_CHECK_HEADER_GL([CPPFLAGS="$CPPFLAGS $sim_ac_gl_cppflags"])
  # SIM_AC_CHECK_HEADER_GLU()

  SIM_AC_HAVE_COIN_IFELSE([
    CPPFLAGS="$CPPFLAGS $sim_ac_coin_cppflags"
    LDFLAGS="$CPPFLAGS $sim_ac_coin_ldflags"
    LIBS="$sim_ac_coin_libs $LIBS"
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_coin_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_coin_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_coin_libs $SOGUI_EXTRA_LIBS"
  ], [
    AC_MSG_ERROR([couldn't compile and link against Coin])
  ])
  SIM_AC_CONFIGURATION_SETTING([Open Inventor brand], [Coin])
fi

# **************************************************************************
# Check for miscellaneous implementation-dependent Open Inventor features

SIM_AC_HAVE_INVENTOR_NODE(SoPolygonOffset)

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoKeyboardEvent::DELETE enum],
  [#include <Inventor/events/SoKeyboardEvent.h>], [
   /* This is either DELETE or KEY_DELETE */
   SoKeyboardEvent::Key key = SoKeyboardEvent::DELETE;],
  [HAVE_SOKEYBOARDEVENT_DELETE])

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoMouseButtonEvent::BUTTON5 enum],
  [#include <Inventor/events/SoMouseButtonEvent.h>], [
   /* mouse wheel support needs BUTTON4 and BUTTON5 */
   SoMouseButtonEvent::Button button = SoMouseButtonEvent::BUTTON5;],
  [HAVE_SOMOUSEBUTTONEVENT_BUTTON5])

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoCamera::setStereoMode() method],
  [#include <Inventor/nodes/SoPerspectiveCamera.h>], [
   /* SoCamera is abstract, so test with SoPerspectiveCamera */
   SoPerspectiveCamera * c = new SoPerspectiveCamera;
   c->setStereoMode(SoCamera::MONOSCOPIC);],
  [HAVE_SOCAMERA_SETSTEREOMODE])

# **************************************************************************

SIM_AC_CHECK_JOYSTICK_LINUX([
  if false; then
  AC_DEFINE(HAVE_JOYSTICK_LINUX, ,
    [Define to enable Linux Joystick driver support])
  AC_DEFINE_UNQUOTED(SOXT_LINUX_JOYSTICK_DEVICE,
    "$sim_ac_joystick_linux_device",
    [Define this to device handle to fallback on])
  fi
])

# for now, it's not a supported device enyways, but we need the conditional...
sim_ac_joystick=linux_avail=false
AM_CONDITIONAL(HAVE_JOYSTICK_LINUX, $sim_ac_joystick_linux_avail)

# Check for GTK+
# Ugly AM_PATH_GTK check macro from gtk.m4 doesn't work with C++ compilers.
sim_ac_gtk_store_ldflags=$LDFLAGS
LDFLAGS=
sim_ac_gtk_store_libs=$LIBS
LIBS=

AC_LANG_PUSH(C)
AM_PATH_GTK(1.2.6,
  [SOGUI_EXTRA_CPPFLAGS="$GTK_CFLAGS $SOGUI_EXTRA_CPPFLAGS"
   CPPFLAGS="$GTK_CFLAGS $CPPFLAGS"],
  AC_MSG_ERROR(Test for Gtk+ failed.))
AC_LANG_POP

LDFLAGS=$sim_ac_gtk_store_ldflags
LIBS=$sim_ac_gtk_store_libs

# The AM_PATH_GTK check macro just lumps the LDFLAGS and LIBS together
# in GTK_LIBS.
for i in $GTK_LIBS; do
  if test -n "`echo $i | egrep '^-L'`"; then
    LDFLAGS="$LDFLAGS $i"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $i"
  else
    LIBS="$LIBS $i"
    SOGUI_EXTRA_LIBS="$SOGUI_EXTRA_LIBS $i"
  fi
done

# Check for GtkGLArea

LIBS="-lgtkgl $LIBS"
AC_CACHE_CHECK([whether the GtkGLArea widget is available],
  sim_cv_lib_gtkgl,
  [AC_TRY_LINK([#include <gtkgl/gtkglarea.h>],
               [gtk_gl_area_new(0L);],
               sim_cv_lib_gtkgl=yes,
               sim_cv_lib_gtkgl=no)])

if test x"$sim_cv_lib_gtkgl" != xyes; then
  AC_MSG_ERROR(Test for GtkGLArea extensions widget failed.)
else
  SOGUI_EXTRA_LIBS="-lgtkgl $SOGUI_EXTRA_LIBS"
fi

# **************************************************************************
# Compiler control.

SIM_AC_COMPILE_DEBUG([
  CPPFLAGS="$CPPFLAGS -DSOGTK_DEBUG=1"
#   SIM_AC_CONFIGURATION_WARNING(
#     [debug compilation causes slower and larger executabled])
], [
  CPPFLAGS="$CPPFLAGS -DSOGTK_DEBUG=0"
])
CPPFLAGS="$CPPFLAGS -DSOGTK_INTERNAL"

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

# **************************************************************************
# Do we want to compile the example programs?

# * --with-test-code is a silent option
AM_CONDITIONAL(BUILD_TESTS, test "x${with_test_code+set}" = "xset")

SIM_AC_SOGUI_STATIC_DEFAULTS

if $sim_ac_static_defaults; then
  SIM_AC_CONFIGURATION_SETTING([Static Materials], [Yes])
else
  SIM_AC_CONFIGURATION_SETTING([Static Materials], [No])
fi

# **************************************************************************
# Gettext support

## Add the languages which your application supports here.
ALL_LINGUAS="de" # "no" tmp disabled. 20011209 mortene.
SIM_GNU_GETTEXT 
## Set PACKAGE_LOCALE_DIR in config.h.
if test x"${prefix}" = x"NONE"; then  
  package_local_dir="${ac_default_prefix}/${DATADIRNAME}/locale";
else
  package_locale_dir="${prefix}/${DATADIRNAME}/locale";
fi
AC_DEFINE_UNQUOTED([PACKAGE_LOCALE_DIR],
    ["${package_locale_dir}"],
    [Location the locale data will get installed to.])

AM_CONDITIONAL([BUILD_INTL], test x"$GMSGFMT" = x"")

# **************************************************************************
# Submodules that must be configured.

AC_CONFIG_SUBDIRS(data)

# **************************************************************************

# this will depend on platform in a while (Window will use sogtk$major)
SOGTK_LIBNAME=-lSoGtk

SIM_AC_UNIQIFY_LIST(SOGUI_EXTRA_CPPFLAGS, -I$includedir $SOGUI_EXTRA_CPPFLAGS)
SIM_AC_UNIQIFY_LIST(SOGUI_EXTRA_LDFLAGS, -L$libdir $SOGUI_EXTRA_LDFLAGS)
SIM_AC_UNIQIFY_LIST(SOGUI_EXTRA_LIBS, $SOGTK_LIBNAME $SOGUI_EXTRA_LIBS)

SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

# **************************************************************************
# END OF "if $sim_ac_build_library" TEST

fi

# **************************************************************************

COIN_COMPILER="$CXX"
if $BUILD_WITH_MSVC; then
  # don't use wrapmsvc from source hierarchy when later using sogtk-config.
  COIN_COMPILER="wrapmsvc"
fi
AC_SUBST(COIN_COMPILER)

# **************************************************************************
# Variable substitutions for using libSoGtk in the generic code.

AC_SUBST([GUI], [GTK])
AC_SUBST([Gui], [Gtk])
AC_SUBST([gui], [gtk])
AC_SUBST([EVENT], ["GdkEvent *"])
AC_SUBST([WIDGET], ["GtkWidget *"])
AC_SUBST([COMPONENTHEADER], [])

# **************************************************************************
# List all makefiles configure must automatically generate.
#
# Note that sogtk-$CONFIG.cfg needs to be generated from the configure
# script -- not just from the Makefile -- as the data/configure script
# depends on it.

AC_OUTPUT([
	sogtk-$CONFIG.cfg:src/Inventor/Gtk/common/sogui.cfg.in
	Makefile
	src/Makefile
	src/Inventor/Makefile
	src/Inventor/Gtk/Makefile
	src/Inventor/Gtk/devices/Makefile
	src/Inventor/Gtk/viewers/Makefile
	src/Inventor/Gtk/widgets/Makefile
	man/Makefile
	man/man1/Makefile
	man/man3/Makefile
	html/Makefile
	po/Makefile.in
	intl/Makefile
        build/Makefile
        build/sogtk.doxygen
        build/sogtk.spec
	test-code/Makefile
	test-code/components/Makefile
	test-code/widgets/Makefile
])

SIM_AC_CONFIGURATION_SETTING([Install Prefix], [$prefix])

SIM_AC_CONFIGURATION_SUMMARY

echo ""
echo "Now, run 'make install' to build and install So$Gui."
echo ""

# **************************************************************************
