# **************************************************************************
# SoGtk/configure.in
# $Id$

AC_INIT(src/Inventor/Gtk/SoGtk.h)
AC_CONFIG_AUX_DIR(cfg)

# **************************************************************************
# Make sure the given source repository is in sync with the master source
# repository.

SIM_AC_CVS_CHANGES([
  # the moving of "conf-macros" to "cfg/m4"
  SIM_AC_CVS_CHANGE([
    rm -rf conf-macros
    cvs co SoGtkMacros
  ], [test -d cfg/m4/CVS], [test ! -d conf-macros])

  # the addition of the "data" module
  SIM_AC_CVS_CHANGE([
    cvs co SoGtkData
  ], [test -d data/CVS])
])

# **************************************************************************
# Library version control.

#  Making releases:
#    SOGTK_MICRO_VERSION += 1;
#    SOGTK_INTERFACE_AGE += 1;
#    SOGTK_BINARY_AGE += 1;
#  if any functions have been added, set SOGTK_INTERFACE_AGE to 0.
#  if backwards compatibility has been broken,
#  set SOGTK_BINARY_AGE _and_ SOGTK_INTERFACE_AGE to 0.

SOGTK_MAJOR_VERSION=0
SOGTK_MINOR_VERSION=8
SOGTK_MICRO_VERSION=0
SOGTK_INTERFACE_AGE=0
SOGTK_BINARY_AGE=0
SOGTK_VERSION=$SOGTK_MAJOR_VERSION.$SOGTK_MINOR_VERSION.$SOGTK_MICRO_VERSION

AC_SUBST(SOGTK_MAJOR_VERSION)
AC_SUBST(SOGTK_MINOR_VERSION)
AC_SUBST(SOGTK_MICRO_VERSION)
AC_SUBST(SOGTK_VERSION)
AC_SUBST(SOGTK_INTERFACE_AGE)
AC_SUBST(SOGTK_BINARY_AGE)

#  libtool versioning
LT_RELEASE=$SOGTK_MAJOR_VERSION.$SOGTK_MINOR_VERSION
LT_CURRENT=`expr $SOGTK_MICRO_VERSION - $SOGTK_INTERFACE_AGE`
LT_REVISION=$SOGTK_INTERFACE_AGE
LT_AGE=`expr $SOGTK_BINARY_AGE - $SOGTK_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$SOGTK_VERSION

#  Not in use yet, should eventually use the same technique as in
#  include/Inventor/SbBasic.h.in.
#  AC_DEFINE_UNQUOTED(SOGTK_MAJOR_VERSION, $SOGTK_MAJOR_VERSION)
#  AC_DEFINE_UNQUOTED(SOGTK_MINOR_VERSION, $SOGTK_MINOR_VERSION)
#  AC_DEFINE_UNQUOTED(SOGTK_MICRO_VERSION, $SOGTK_MICRO_VERSION)
#  AC_DEFINE_UNQUOTED(SOGTK_VERSION, "$SOGTK_VERSION")

# **************************************************************************

AC_CANONICAL_SYSTEM

# **************************************************************************
# Locate compilers and set C++ as the default compiler to run in tests.

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_LANG_CPLUSPLUS

# **************************************************************************
# Miscellaneous options and initializations.

AM_INIT_AUTOMAKE(libSoGtk, $VERSION)

#  File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

#  Default to not building a static library.
#  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

#  Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

#  Initialize libtool
AC_PROG_LIBTOOL

#  These are used for constructing the sogtk-config file.
SOGTK_EXTRA_CPPFLAGS=
SOGTK_EXTRA_LDFLAGS=
SOGTK_EXTRA_LIBS=
AC_SUBST(SOGTK_EXTRA_CPPFLAGS)
AC_SUBST(SOGTK_EXTRA_LDFLAGS)
AC_SUBST(SOGTK_EXTRA_LIBS)

SIM_EXPAND_DIR_VARS

# **************************************************************************

if test -n "$with_inventor" -a x"$with_inventor" != x"no"; then
  SIM_AC_CHECK_DL([
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_dl_libs $SOGTK_EXTRA_LIBS"
  ])

  SIM_AC_CHECK_X11([
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_x11_libs $SOGTK_EXTRA_LIBS"

    SIM_AC_CHECK_X11SHMEM([
      SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_x11shmem_cppflags"
      SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_x11shmem_ldflags"
      SOGTK_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOGTK_EXTRA_LIBS"
    ], [
      AC_MSG_WARN([couldn't use X11 shared memory extension - may cause problems with OpenGL linking later])
    ])
  ], [
    AC_MSG_WARN([couldn't use X11 library - may cause problems with OpenGL linking later])
  ])

  SIM_AC_CHECK_OPENGL([
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_gl_libs $SOGTK_EXTRA_LIBS"
  ], [
    AC_MSG_ERROR([need OpenGL-compatible development system installation])
  ])

  SIM_AC_CHECK_GLU([
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_glu_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_glu_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_glu_libs $SOGTK_EXTRA_LIBS"
  ], [
    AC_MSG_ERROR([need OpenGL utility library])
  ])

  SIM_AC_HAVE_INVENTOR_IFELSE([
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_inventor_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_inventor_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_inventor_libs $SOGTK_EXTRA_LIBS"
    CPPFLAGS="$CPPFLAGS $sim_ac_inventor_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_inventor_ldflags"
    LIBS="$sim_ac_inventor_libs $LIBS"
  ], [
    AC_MSG_ERROR([couldn't compile and link against Open Inventor])
  ])
  sim_ac_brand_inventor="SGI/TGS Inventor"
else
  SIM_AC_HAVE_COIN_IFELSE([
    CPPFLAGS="$CPPFLAGS $sim_ac_coin_cppflags"
    LDFLAGS="$CPPFLAGS $sim_ac_coin_ldflags"
    LIBS="$sim_ac_coin_libs $LIBS"
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_coin_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_coin_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_coin_libs $SOGTK_EXTRA_LIBS"
  ], [
    AC_MSG_ERROR([couldn't compile and link against Coin])
  ])
  sim_ac_brand_inventor=Coin
fi

# Check for the availability of this node (it is used in the hidden
# line rendering), which is not part of older Inventor implementations.

SIM_AC_HAVE_INVENTOR_NODE(SoPolygonOffset)

SIM_AC_HAVE_SOMOUSEBUTTONEVENT_BUTTONS

### Check for GTK+ #####################################################

# Ugly AM_PATH_GTK check macro from gtk.m4 doesn't work with C++ compilers.
sim_ac_gtk_store_ldflags=$LDFLAGS
LDFLAGS=
sim_ac_gtk_store_libs=$LIBS
LIBS=
AC_LANG_SAVE
AC_LANG_C

AM_PATH_GTK(1.2.6,
  [SOGTK_EXTRA_CPPFLAGS="$GTK_CFLAGS $SOGTK_EXTRA_CPPFLAGS"
   CPPFLAGS="$GTK_CFLAGS $CPPFLAGS"],
  AC_MSG_ERROR(Test for Gtk+ failed.))

# Restore state.
AC_LANG_RESTORE
LDFLAGS=$sim_ac_gtk_store_ldflags
LIBS=$sim_ac_gtk_store_libs

# The AM_PATH_GTK check macro just lumps the LDFLAGS and LIBS together
# in GTK_LIBS.
for i in $GTK_LIBS; do
  if test -n "`echo $i | egrep '^-L'`"; then
    LDFLAGS="$LDFLAGS $i"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $i"
  else
    LIBS="$LIBS $i"
    SOGTK_EXTRA_LIBS="$SOGTK_EXTRA_LIBS $i"
  fi
done

# Check for GtkGLArea

# Avoid the crappy gtkgl.m4 macro.
# AM_PATH_GTKGL(, AC_MSG_ERROR(Test for GtkGLArea failed.  See the file 'INSTALL' for help.))

LIBS="-lgtkgl $LIBS"

AC_CACHE_CHECK([whether the GtkGLArea widget is available],
  sim_cv_lib_gtkgl,
  [AC_TRY_LINK([#include <gtkgl/gtkglarea.h>],
               [gtk_gl_area_new(0L);],
               sim_cv_lib_gtkgl=yes,
               sim_cv_lib_gtkgl=no)])

if test x"$sim_cv_lib_gtkgl" != xyes; then
  AC_MSG_ERROR(Test for GtkGLArea extensions widget failed.)
else
  SOGTK_EXTRA_LIBS="-lgtkgl $SOGTK_EXTRA_LIBS"
fi

# **************************************************************************
# Compiler control.

SIM_AC_COMPILE_DEBUG(
  [CPPFLAGS="$CPPFLAGS -DSOGTK_DEBUG=1"],
  [CPPFLAGS="$CPPFLAGS -DSOGTK_DEBUG=0"])

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

# **************************************************************************
# Do we want to compile the example programs?

# * --with-test-code is a silent option
AM_CONDITIONAL(BUILD_TESTS, test "x${with_test_code+set}" = "xset")

SIM_AC_SOGUI_STATIC_DEFAULTS

# **************************************************************************
# Variable substitutions for using libSoGtk in the generic code.

GUI=GTK
Gui=Gtk
gui=gtk
WIDGET="GtkWidget *"
EVENT="GdkEvent *"
COMPONENTHEADER=""

AC_SUBST(GUI)
AC_SUBST(Gui)
AC_SUBST(gui)
AC_SUBST(EVENT)
AC_SUBST(WIDGET)
AC_SUBST(COMPONENTHEADER)

# **************************************************************************
# FIXME: avoid the shift magic

SIM_AC_UNIQIFY_LIST(SOGTK_EXTRA_CPPFLAGS, -I$includedir $SOGTK_EXTRA_CPPFLAGS)
set : $SOGTK_EXTRA_CPPFLAGS
shift
shift
SOGTK_EXTRA_CPPFLAGS=$@

SIM_AC_UNIQIFY_LIST(SOGTK_EXTRA_LDFLAGS, -L$libdir $SOGTK_EXTRA_LDFLAGS)
set : $SOGTK_EXTRA_LDFLAGS
shift
shift
SOGTK_EXTRA_LDFLAGS=$@

SIM_AC_UNIQIFY_LIST(SOGTK_EXTRA_LIBS, $SOGTK_LIBNAME $SOGTK_EXTRA_LIBS)
set : $SOGTK_EXTRA_LIBS
shift
shift
SOGTK_EXTRA_LIBS=$@

SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

# **************************************************************************
# Submodules that must be configured.

AC_CONFIG_SUBDIRS(data)

# **************************************************************************
# List all makefiles configure must automatically generate.

AC_OUTPUT([
	sogtk-config
	Makefile
	src/Inventor/Gtk/Makefile
	src/Inventor/Gtk/devices/Makefile
	src/Inventor/Gtk/viewers/Makefile
	src/Inventor/Gtk/widgets/Makefile
	test-code/Makefile
	test-code/components/Makefile
	test-code/widgets/Makefile
], [
	chmod a+x sogtk-config
])

sim_ac_sogui_static_defaults=No
$sim_ac_static_defaults && sim_ac_sogui_static_defaults=Yes

echo ""
echo "SoGtk configuration:"
echo "  Open Inventor:     $sim_ac_brand_inventor"
echo "  Static Materials:  $sim_ac_sogui_static_defaults"
echo ""
echo "Now, run 'make install' to build and install SoGtk."
echo ""

# **************************************************************************
