#  This can be any file in the package.
AC_INIT(src/Inventor/Gtk/SoGtk.h)

sim_ac_cvs_syncproblem=false;
sim_ac_examples_check_file=${srcdir}/examples/configure.in

if test ! -f $sim_ac_examples_check_file; then
  if test "x${with_auto_cvs_update+set}" = "xset"; then
    echo "Trying to honour the --with-auto-cvs-update option."
    sim_ac_save_cwd="`pwd`"
    cd ${srcdir}
    if test ! -d ./examples -o ! -f ./CVS/Entries; then
      AC_MSG_ERROR([something failed horribly - can't do auto-cvs-update])
    fi
    grep -v "^D/examples/" CVS/Entries > /tmp/SoGtk-CVS-Entries.$$
    cp /tmp/SoGtk-CVS-Entries.$$ CVS/Entries
    rm /tmp/SoGtk-CVS-Entries.$$
    rm -rf examples
    cvs co SoGtkExamples
    cd ${sim_ac_save_cwd}
    echo "Done.  Proceeding..."
  fi
fi

if test ! -f $sim_ac_examples_check_file; then
  echo ""
  echo "  You appear to have an old setup of the SoGtk source repository."
  echo "  Parts of it have changed structurally, and you need to do the"
  echo "  following in the SoGtk source directory:"
  echo ""
  echo "    \$ grep -v \"^D/examples/\" CVS/Entries > /tmp/SoGtk-CVS-Entries"
  echo "    \$ cp /tmp/SoGtk-CVS-Entries CVS/Entries"
  echo "    \$ rm /tmp/SoGtk-CVS-Entries"
  echo "    \$ rm -rf examples"
  echo "    \$ cvs co SoGtkExamples"
  echo ""
  echo "  You can also run configure with the option --with-auto-cvs-update"
  echo "  to allow the configure script to try to take care of this.  This"
  echo "  option is very experimental and should not be used if you use"
  echo "  configure in a way that may be considered \"weird\"."
  echo ""
  sim_ac_cvs_syncproblem=true
fi

if test "x$sim_ac_cvs_syncproblem" = "xtrue"; then
  exit
fi

#  Locate C++ compiler and set C++ as the default compiler to run
#  in tests.

AC_PROG_CXX
AC_LANG_CPLUSPLUS

if test "x$GXX" != "xyes"; then
  AC_MSG_WARN(You are not using the GNU compiler -- other compilers are not well supported at the moment)
fi

# *******************************************************************
# * Library version control.
# *******************************************************************

#  Making releases:
#    SOGTK_MICRO_VERSION += 1;
#    SOGTK_INTERFACE_AGE += 1;
#    SOGTK_BINARY_AGE += 1;
#  if any functions have been added, set SOGTK_INTERFACE_AGE to 0.
#  if backwards compatibility has been broken,
#  set SOGTK_BINARY_AGE _and_ SOGTK_INTERFACE_AGE to 0.
# 
SOGTK_MAJOR_VERSION=0
SOGTK_MINOR_VERSION=8
SOGTK_MICRO_VERSION=0
SOGTK_INTERFACE_AGE=0
SOGTK_BINARY_AGE=0
SOGTK_VERSION=$SOGTK_MAJOR_VERSION.$SOGTK_MINOR_VERSION.$SOGTK_MICRO_VERSION

AC_SUBST(SOGTK_MAJOR_VERSION)
AC_SUBST(SOGTK_MINOR_VERSION)
AC_SUBST(SOGTK_MICRO_VERSION)
AC_SUBST(SOGTK_VERSION)
AC_SUBST(SOGTK_INTERFACE_AGE)
AC_SUBST(SOGTK_BINARY_AGE)

#  libtool versioning
LT_RELEASE=$SOGTK_MAJOR_VERSION.$SOGTK_MINOR_VERSION
LT_CURRENT=`expr $SOGTK_MICRO_VERSION - $SOGTK_INTERFACE_AGE`
LT_REVISION=$SOGTK_INTERFACE_AGE
LT_AGE=`expr $SOGTK_BINARY_AGE - $SOGTK_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$SOGTK_VERSION

#  Not in use yet, should eventually use the same technique as in
#  include/Inventor/SbBasic.h.in.
#  AC_DEFINE_UNQUOTED(SOGTK_MAJOR_VERSION, $SOGTK_MAJOR_VERSION)
#  AC_DEFINE_UNQUOTED(SOGTK_MINOR_VERSION, $SOGTK_MINOR_VERSION)
#  AC_DEFINE_UNQUOTED(SOGTK_MICRO_VERSION, $SOGTK_MICRO_VERSION)
#  AC_DEFINE_UNQUOTED(SOGTK_VERSION, "$SOGTK_VERSION")

# *******************************************************************
# * Miscellaneous options and initializations.
# *******************************************************************

AM_INIT_AUTOMAKE(libSoGtk, $VERSION)

#  File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

#  Default to not building a static library.
#  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

#  Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

#  Initialize libtool
AC_PROG_LIBTOOL


#  These are used for constructing the sogtk-config file.
SOGTK_EXTRA_CPPFLAGS=
SOGTK_EXTRA_LDFLAGS=
SOGTK_EXTRA_LIBS=
AC_SUBST(SOGTK_EXTRA_CPPFLAGS)
AC_SUBST(SOGTK_EXTRA_LDFLAGS)
AC_SUBST(SOGTK_EXTRA_LIBS)


# ************************************************************************

# AC_PATH_XTRA
# if test "x$no_x" = "xyes"; then
#   AC_MSG_ERROR([X11 libraries couldn't be found! (use --x-includes and --x-libraries to locate them)])
# fi

# ************************************************************************

if test x"$with_inventor" = xyes; then

  SIM_CHECK_DL([
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_dl_libs $SOGTK_EXTRA_LIBS"
  ])

  SIM_CHECK_X11([
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_x11_libs $SOGTK_EXTRA_LIBS"
  ])

  if test x"$sim_ac_x11_avail" = xyes; then
    SIM_CHECK_X11SHMEM([
      SOGTK_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOGTK_EXTRA_LIBS"
    ])
    SIM_CHECK_X11MU([
      SOGTK_EXTRA_LIBS="$sim_ac_x11mu_libs $SOGTK_EXTRA_LIBS"
    ])
  fi

  SIM_AC_CHECK_OPENGL([
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_gl_libs $SOGTK_EXTRA_LIBS"
  ],AC_MSG_ERROR(needs an OpenGL-compatible development system installation))

  SIM_CHECK_INVENTOR([
    SOGTK_EXTRA_CPPFLAGS="$sim_ac_oiv_cppflags $SOGTK_EXTRA_CPPFLAGS"
    SOGTK_EXTRA_LDFLAGS="$sim_ac_oiv_ldflags $SOGTK_EXTRA_LDFLAGS"
    SOGTK_EXTRA_LIBS="$sim_ac_oiv_libs $SOGTK_EXTRA_LIBS"
  ],AC_MSG_ERROR(couldn't compile and link against Open Inventor))

else

  SIM_CHECK_COIN([
    SOGTK_EXTRA_CPPFLAGS="$SOGTK_EXTRA_CPPFLAGS $sim_ac_coin_cppflags"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $sim_ac_coin_ldflags"
    SOGTK_EXTRA_LIBS="$sim_ac_coin_libs $SOGTK_EXTRA_LIBS"
  ],AC_MSG_ERROR(couldn't compile and link against Coin))

fi

# Check for the availability of this node (it is used in the hidden
# line rendering), which is not part of older Inventor implementations.
SIM_HAVE_SOPOLYGONOFFSET

### Check for GTK+ #####################################################

# Ugly AM_PATH_GTK check macro from gtk.m4 doesn't work with C++ compilers.
sim_ac_gtk_store_ldflags=$LDFLAGS
LDFLAGS=
sim_ac_gtk_store_libs=$LIBS
LIBS=
AC_LANG_SAVE
AC_LANG_C

AM_PATH_GTK(1.2.6,
  [SOGTK_EXTRA_CPPFLAGS="$GTK_CFLAGS $SOGTK_EXTRA_CPPFLAGS"
   CPPFLAGS="$GTK_CFLAGS $CPPFLAGS"],
  AC_MSG_ERROR(Test for Gtk+ failed.))

# Restore state.
AC_LANG_RESTORE
LDFLAGS=$sim_ac_gtk_store_ldflags
LIBS=$sim_ac_gtk_store_libs

# The AM_PATH_GTK check macro just lumps the LDFLAGS and LIBS together
# in GTK_LIBS.
for i in $GTK_LIBS; do
  if test -n "`echo $i | egrep '^-L'`"; then
    LDFLAGS="$LDFLAGS $i"
    SOGTK_EXTRA_LDFLAGS="$SOGTK_EXTRA_LDFLAGS $i"
  else
    LIBS="$LIBS $i"
    SOGTK_EXTRA_LIBS="$SOGTK_EXTRA_LIBS $i"
  fi
done


# Check for GtkGLArea

# Avoid the crappy gtkgl.m4 macro.
# AM_PATH_GTKGL(, AC_MSG_ERROR(Test for GtkGLArea failed.  See the file 'INSTALL' for help.))

LIBS="-lgtkgl $LIBS"

AC_CACHE_CHECK([whether the GtkGLArea widget is available],
  sim_cv_lib_gtkgl,
  [AC_TRY_LINK([#include <gtkgl/gtkglarea.h>],
               [gtk_gl_area_new(0L);],
               sim_cv_lib_gtkgl=yes,
               sim_cv_lib_gtkgl=no)])

if test x"$sim_cv_lib_gtkgl" != xyes; then
  AC_MSG_ERROR(Test for GtkGLArea extensions widget failed.)
else
  SOGTK_EXTRA_LIBS="-lgtkgl $SOGTK_EXTRA_LIBS"
fi


# *******************************************************************
# * Compiler control.
# *******************************************************************

SIM_COMPILE_DEBUG
if test $enable_debug = yes; then
  CXXFLAGS="$CXXFLAGS -DSOGTK_DEBUG=1"
else
  CXXFLAGS="$CXXFLAGS -DSOGTK_DEBUG=0"
fi

SIM_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

# *******************************************************************
# * do we want to compile the example programs?
# *******************************************************************

# * --with-test-code is a silent option
AM_CONDITIONAL(BUILD_TESTS, test "x${with_test_code+set}" = "xset")

AC_ARG_WITH(examples,
  [  --with-examples         compile SoGtk example programs [default=yes]],
  [case "${withval}" in
    yes) want_examples=yes ;;
    no)  want_examples=no ;;
    *) AC_MSG_ERROR(bad value \"${withval}\" for --with-examples) ;;
  esac],
  [want_examples=yes])


sim_ac_ivexamples_available=no
if test -f ${srcdir}/ivexamples/configure.in; then
  sim_ac_ivexamples_available=yes
fi

AM_CONDITIONAL(BUILD_EXAMPLES, test x"$want_examples" = xyes)
AM_CONDITIONAL(BUILD_IV_EXAMPLES, test x"$sim_ac_ivexamples_available" = xyes)


# *******************************************************************
# * Variable substitutions for using libSoGtk in the generic code.
# *******************************************************************

. ${srcdir}/libconfigvars.sh

AC_SUBST(GUI)AC_SUBST(lGUI)AC_SUBST(uGUI)
AC_SUBST(WIDGET)AC_SUBST(WINWIDGET)AC_SUBST(EVENT)
AC_SUBST(COMPONENTHEADER)


# *******************************************************************
# * Configure the submodule with the examples.
# *******************************************************************

sim_ac_subconfig=examples
if test x"$sim_ac_ivexamples_available" = xyes; then
  sim_ac_subconfig="$sim_ac_subconfig ivexamples"
fi
AC_CONFIG_SUBDIRS($sim_ac_subconfig)


# ************************************************************************
# * List all makefiles configure must automatically generate.
# ************************************************************************

test -d src || mkdir src
test -d src/Inventor || mkdir src/Inventor
test -d src/Inventor/Gtk || mkdir src/Inventor/Gtk

AC_OUTPUT([
	sogtk-config
	Makefile
	src/Inventor/Gtk/Makefile
	src/Inventor/Gtk/devices/Makefile
	src/Inventor/Gtk/viewers/Makefile
	src/Inventor/Gtk/widgets/Makefile
	test-code/Makefile
	test-code/widgets/Makefile
],[
	chmod a+x sogtk-config
])

echo ""
echo "Now, run 'make install' to build and install SoGtk."
echo ""

# ************************************************************************
